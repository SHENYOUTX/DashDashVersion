# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)
  
trigger:
  branches:
    include:
    - develop
    - feature/*
    - hotfix/*
    - release/*
    - master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: PowerShell@2
  condition: eq(variables.imageName, 'windows-latest')
  inputs:
    targetType: inline
    pwsh: true
    script: 'choco install -y docfx'
  displayName: Install docfx

- task: PowerShell@2
  condition: eq(variables.imageName, 'windows-latest')
  inputs:
    targetType: inline
    pwsh: true
    script: 'ls env:'
  displayName: list envirement variables

- task: PowerShell@2
  condition: eq(variables.imageName, 'windows-latest')
  inputs:
    targetType: inline
    pwsh: true
    script: 'choco install codecov'
  displayName: Install codecov

- task: DotNetCoreInstaller@0
  inputs:
    packageType: 'sdk'
    version: '2.2.300' 
  displayName: Install .NET Core 2 latest
  env:
   DOTNET_CLI_TELEMETRY_OPTOUT: false
   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true


- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: true
    script: 'dotnet tool install --global coverlet.console'
  env:
   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  displayName: Install coverlet

- task: PowerShell@2
  inputs:
    targetType: inline
    pwsh: true
    script: 'dotnet tool install --global git-flow-version'
  env:
   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  displayName: Install git-flow-version


- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '5.1.0'
    checkLatest: true
  env:
   DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  displayName: Install NuGet

- task: InstallSSHKey@0
  condition: eq(variables.imageName, 'windows-latest')
  inputs:
    knownHostsEntry: 'github.com, ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
    sshPublicKey: 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIF6/HvdVdOqxei+waWEWBR9u3zwx9TZtyeYuIqs2uBL0 Azure-pipeline'
    sshKeySecureFile: 'GithubDeploymentKey'
  displayName: Install sshKey for tagging
  
- task: InstallSSHKey@0
  condition: eq(variables.imageName, 'windows-latest')
  inputs:
    knownHostsEntry: 'github.com, ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
    sshPublicKey: 'secdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAAvZmttHSrJ2SHfXJJImvVWn70vLDh9jetSBwBsjK3MEEES7CBAabuJvPtXqPLQxDngkW4GJTqbrqDzp2YDHejhTAA8trE+sbFUXHDNbC3lwFdyeLA5YD0Kmmq7V7UIpK0h3khjowu4Ivgp6yP1bXl/3iOyVBENkK+Gx6aryPVkRN9ipQ=='
    sshKeySecureFile: 'DashDashVersionSiteAzurePipeline'
  displayName: Install sshKey for documentation publishing

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'
  displayName: Dotnet Restore

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    arguments: '/p:CollectCoverage=true /p:Exclude=[xunit.*]* /p:CoverletOutput=''../../built/DashDashVersion.xml'' /p:CoverletOutputFormat=cobertura'
    testRunTitle: 'Running tests'
  displayName: Running Tests
  
- task: PowerShell@2
  condition: eq(variables.imageName, 'windows-latest')
  inputs:
    targetType: inline
    pwsh: true
    script: 'codecov -f "./built/DashDashVersion.xml" -t $env:CodecovToken'
  env:
    CodecovToken: $(CodecovToken)
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  displayName: Publish code coverage

- task: PowerShell@2
  displayName: calculating version
  inputs:
    targetType: 'inline'
    script: |
      $env:version = git-flow-version --branch $env:BUILD_SOURCEBRANCHNAME | ConvertFrom-Json
      Write-Host "calculated version:"
      $env:version | Format-List

- task: PowerShell@2
  condition: eq(variables.imageName, 'windows-latest')
  displayName: create assembly info
  inputs:
    targetType: 'inline'
    script: |
      $assemblyInfoContent = @"
      // <auto-generated/>
      using System.Reflection;
      using System.Runtime.InteropServices;

      [assembly: AssemblyVersionAttribute("$($env:version.AssemblyVersion)")]
      [assembly: AssemblyFileVersionAttribute("$($env:version.AssemblyVersion)")]
      [assembly: AssemblyInformationalVersionAttribute("$($env:version.FullSemVer)")]
      "@
      if (-not (Test-Path "built")) {
        New-Item -ItemType Directory "built"
      }
      $assemblyInfoContent | Out-File -Encoding utf8 (Join-Path "built" "SharedAssemblyInfo.cs") -Force

- task: DotNetCoreCLI@2
  condition: eq(variables.imageName, 'windows-latest')
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: '$env:version.FullSemVer'
    buildProperties: '/p:NoPackageAnalysis=true'
  displayName: Creating Package

- task: PowerShell@2
  condition: eq(variables.imageName, 'windows-latest')
  displayName: tagging build
  inputs:
    targetType: 'inline'
    script: |
      if (Test-Path "./.git/refs/tags/$($version.SemVer)") {
      Write-Host "Tag: $($env:version.SemVer) is already pressent in the repository!"
      }
      else
      {
      git remote set-url origin git@github.com:hightechict/DashDashVersion.git
      git tag $env:version.SemVer
      git push --verbose origin $version.SemVer 
      }

- task: PowerShell@2
  condition: and(eq(variables.imageName, 'windows-latest'),not(contains(variables.BUILD_SOURCEBRANCH,'/feature/'))) 
  displayName: pushing NuGet package
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Publishing NuGet package"
      pushd built
      dotnet nuget push *.nupkg --api-key $env:NuGet_APIKEY --no-symbols true --source https://api.nuget.org/v3/index.json 
      popd
  env:
    NuGet_APIKEY: $(nuget.APIKEY)
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

- task: PowerShell@2
  condition: eq(variables.imageName, 'windows-latest')
  displayName: Generating documentation
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Generating Documentation"
      Copy-Item README.md doc/index.md
      docfx ./doc/docfx.json

- task: PythonScript@0
  displayName: pushing documentation
  condition: eq(variables.imageName, 'windows-latest')
  inputs:
    scriptSource: 'inline'
    script: |
      import os
      import glob
      artifactsDirectory = os.environ['Build_ArtifactStagingDirectory'
      siteDirectory = artifactsDirectory.join('''\DashDashVersion_site''')
      os.chdir(artifactsDirectory)
      os.system('git clone --progress -v git@github.com:hightechict/DashDashVersion_site.git --branch develop')
      os.chdir(siteDirectory))
      print(glob.glob(siteDirectory.join('''\*''')))
      